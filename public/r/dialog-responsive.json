{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dialog-responsive",
  "type": "registry:component",
  "title": "Dialog Responsive",
  "description": "A responsive dialog component",
  "registryDependencies": [
    "utils",
    "dialog",
    "drawer"
  ],
  "files": [
    {
      "path": "registry/default/components/dialog-responsive.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { useMediaQuery } from \"@/registry/default/hooks/use-media-query\";\nimport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Drawer,\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n} from \"@/components/ui/drawer\";\n\ninterface BaseProps {\n  children: React.ReactNode;\n}\n\ninterface RootDialogResponsiveProps extends BaseProps {\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n}\n\ninterface DialogResponsiveProps extends BaseProps {\n  className?: string;\n  asChild?: true;\n}\n\nconst DialogResponsiveContext = React.createContext<{ isDesktop: boolean }>({\n  isDesktop: false,\n});\n\nconst useDialogResponsiveContext = () => {\n  const context = React.useContext(DialogResponsiveContext);\n  if (!context) {\n    throw new Error(\n      \"DialogResponsive components cannot be rendered outside the DialogResponsive Context\",\n    );\n  }\n  return context;\n};\n\nconst DialogResponsive = ({\n  children,\n  ...props\n}: RootDialogResponsiveProps) => {\n  const isDesktop = useMediaQuery(\"(min-width: 768px)\");\n  const DialogResponsive = isDesktop ? Dialog : Drawer;\n\n  return (\n    <DialogResponsiveContext.Provider value={{ isDesktop }}>\n      <DialogResponsive {...props} {...(!isDesktop && { autoFocus: true })}>\n        {children}\n      </DialogResponsive>\n    </DialogResponsiveContext.Provider>\n  );\n};\n\nconst DialogResponsiveTrigger = ({\n  className,\n  children,\n  ...props\n}: DialogResponsiveProps) => {\n  const { isDesktop } = useDialogResponsiveContext();\n  const DialogResponsiveTrigger = isDesktop ? DialogTrigger : DrawerTrigger;\n\n  return (\n    <DialogResponsiveTrigger className={className} {...props}>\n      {children}\n    </DialogResponsiveTrigger>\n  );\n};\n\nconst DialogResponsiveClose = ({\n  className,\n  children,\n  ...props\n}: DialogResponsiveProps) => {\n  const { isDesktop } = useDialogResponsiveContext();\n  const DialogResponsiveClose = isDesktop ? DialogClose : DrawerClose;\n\n  return (\n    <DialogResponsiveClose className={className} {...props}>\n      {children}\n    </DialogResponsiveClose>\n  );\n};\n\nconst DialogResponsiveContent = ({\n  className,\n  children,\n  ...props\n}: DialogResponsiveProps) => {\n  const { isDesktop } = useDialogResponsiveContext();\n  const DialogResponsiveContent = isDesktop ? DialogContent : DrawerContent;\n\n  return (\n    <DialogResponsiveContent className={className} {...props}>\n      {children}\n    </DialogResponsiveContent>\n  );\n};\n\nconst DialogResponsiveDescription = ({\n  className,\n  children,\n  ...props\n}: DialogResponsiveProps) => {\n  const { isDesktop } = useDialogResponsiveContext();\n  const DialogResponsiveDescription = isDesktop\n    ? DialogDescription\n    : DrawerDescription;\n\n  return (\n    <DialogResponsiveDescription className={className} {...props}>\n      {children}\n    </DialogResponsiveDescription>\n  );\n};\n\nconst DialogResponsiveHeader = ({\n  className,\n  children,\n  ...props\n}: DialogResponsiveProps) => {\n  const { isDesktop } = useDialogResponsiveContext();\n  const DialogResponsiveHeader = isDesktop ? DialogHeader : DrawerHeader;\n\n  return (\n    <DialogResponsiveHeader className={className} {...props}>\n      {children}\n    </DialogResponsiveHeader>\n  );\n};\n\nconst DialogResponsiveTitle = ({\n  className,\n  children,\n  ...props\n}: DialogResponsiveProps) => {\n  const { isDesktop } = useDialogResponsiveContext();\n  const DialogResponsiveTitle = isDesktop ? DialogTitle : DrawerTitle;\n\n  return (\n    <DialogResponsiveTitle className={className} {...props}>\n      {children}\n    </DialogResponsiveTitle>\n  );\n};\n\nconst DialogResponsiveBody = ({\n  className,\n  children,\n  ...props\n}: DialogResponsiveProps) => {\n  return (\n    <div className={cn(\"px-4 md:px-0\", className)} {...props}>\n      {children}\n    </div>\n  );\n};\n\nconst DialogResponsiveFooter = ({\n  className,\n  children,\n  ...props\n}: DialogResponsiveProps) => {\n  const { isDesktop } = useDialogResponsiveContext();\n  const DialogResponsiveFooter = isDesktop ? DialogFooter : DrawerFooter;\n\n  return (\n    <DialogResponsiveFooter className={className} {...props}>\n      {children}\n    </DialogResponsiveFooter>\n  );\n};\n\nexport {\n  DialogResponsive,\n  DialogResponsiveTrigger,\n  DialogResponsiveClose,\n  DialogResponsiveContent,\n  DialogResponsiveDescription,\n  DialogResponsiveHeader,\n  DialogResponsiveTitle,\n  DialogResponsiveBody,\n  DialogResponsiveFooter,\n};\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/hooks/use-media-query.ts",
      "content": "import * as React from \"react\";\n\nexport function useMediaQuery(query: string) {\n  const [value, setValue] = React.useState(false);\n\n  React.useEffect(() => {\n    function onChange(event: MediaQueryListEvent) {\n      setValue(event.matches);\n    }\n\n    const result = matchMedia(query);\n    result.addEventListener(\"change\", onChange);\n    setValue(result.matches);\n\n    return () => result.removeEventListener(\"change\", onChange);\n  }, [query]);\n\n  return value;\n}\n",
      "type": "registry:hook"
    }
  ],
  "categories": [
    "dialog"
  ]
}