{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dropzone",
  "type": "registry:component",
  "title": "Dropzone",
  "description": "A dropzone component",
  "dependencies": [
    "react-dropzone"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "registry/default/components/dropzone.tsx",
      "content": "\"use client\";\n\nimport React, { useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  type DropzoneProps as _DropzoneProps,\n  type DropzoneState as _DropzoneState,\n} from \"react-dropzone\";\nimport { Trash } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { File, ImageIcon, Upload } from \"lucide-react\";\n\ntype DropzoneState = _DropzoneState;\n\ninterface Props extends Omit<_DropzoneProps, \"children\"> {\n  containerClassName?: string;\n  dropZoneClassName?: string;\n  children?: (dropzone: DropzoneState) => React.ReactNode;\n  showFilesList?: boolean;\n  showErrorMessage?: boolean;\n}\n\nexport function Dropzone({\n  containerClassName,\n  dropZoneClassName,\n  children,\n  showFilesList = true,\n  ...props\n}: Props) {\n  const dropzone = useDropzone({\n    ...props,\n    onDrop(acceptedFiles, fileRejections, event) {\n      if (props.onDrop) props.onDrop(acceptedFiles, fileRejections, event);\n      else {\n        setFilesUploaded((_filesUploaded) => [\n          ..._filesUploaded,\n          ...acceptedFiles,\n        ]);\n        if (fileRejections.length > 0) {\n          let _errorMessage = `Could not upload ${fileRejections[0].file.name}`;\n          if (fileRejections.length > 1)\n            _errorMessage =\n              _errorMessage + `, and ${fileRejections.length - 1} other files.`;\n          setErrorMessage(_errorMessage);\n        } else {\n          setErrorMessage(\"\");\n        }\n      }\n    },\n  });\n\n  const [filesUploaded, setFilesUploaded] = useState<File[]>([]);\n  const [errorMessage, setErrorMessage] = useState<string>();\n\n  const deleteUploadedFile = (index: number) => {\n    setFilesUploaded((_uploadedFiles) => [\n      ..._uploadedFiles.slice(0, index),\n      ..._uploadedFiles.slice(index + 1),\n    ]);\n  };\n\n  return (\n    <div className={cn(\"flex min-w-70 flex-col gap-2\", containerClassName)}>\n      <div\n        {...dropzone.getRootProps()}\n        className={cn(\n          \"hover:bg-accent hover:text-accent-foreground flex h-32 w-full cursor-pointer items-center justify-center rounded-lg border-2 border-dashed border-gray-200 transition-all select-none\",\n          dropZoneClassName,\n        )}\n      >\n        <input {...dropzone.getInputProps()} />\n        {children ? (\n          children(dropzone)\n        ) : dropzone.isDragAccept ? (\n          <div className=\"text-sm font-medium\">Drop your files here!</div>\n        ) : (\n          <div className=\"flex flex-col items-center gap-1.5\">\n            <div className=\"flex flex-row items-center gap-0.5 text-sm font-medium\">\n              <Upload className=\"mr-2 h-4 w-4\" /> Upload files\n            </div>\n            {props.maxSize && (\n              <div className=\"text-xs font-medium text-gray-400\">\n                Max. file size: {(props.maxSize / (1024 * 1024)).toFixed(2)} MB\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n      {errorMessage && (\n        <span className=\"mt-3 text-xs text-red-600\">{errorMessage}</span>\n      )}\n      {showFilesList && filesUploaded.length > 0 && (\n        <div\n          className={`flex w-full flex-col gap-2 ${\n            filesUploaded.length > 2 ? \"h-48\" : \"h-fit\"\n          } mt-2 ${filesUploaded.length > 0 ? \"pb-2\" : \"\"}`}\n        >\n          <div className=\"w-full\">\n            {filesUploaded.map((fileUploaded, index) => (\n              <div\n                key={index}\n                className=\"mt-2 flex h-16 w-full flex-row items-center justify-between rounded-lg border-2 border-solid border-gray-200 px-4 shadow-sm\"\n              >\n                <div className=\"flex h-full flex-row items-center gap-4\">\n                  {fileUploaded.type === \"application/pdf\" ? (\n                    <File className=\"h-6 w-6\" />\n                  ) : (\n                    <ImageIcon className=\"h-6 w-6\" />\n                  )}\n                  <div className=\"flex flex-col gap-0\">\n                    <div className=\"text-[0.85rem] leading-snug font-medium\">\n                      {fileUploaded.name.split(\".\").slice(0, -1).join(\".\")}\n                    </div>\n                    <div className=\"text-[0.7rem] leading-tight text-gray-500\">\n                      .{fileUploaded.name.split(\".\").pop()} â€¢{\" \"}\n                      {(fileUploaded.size / (1024 * 1024)).toFixed(2)} MB\n                    </div>\n                  </div>\n                </div>\n                <Button\n                  variant=\"destructive\"\n                  size=\"icon\"\n                  onClick={() => deleteUploadedFile(index)}\n                >\n                  <Trash className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "input"
  ]
}