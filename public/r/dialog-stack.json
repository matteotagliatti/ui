{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dialog-stack",
  "type": "registry:component",
  "title": "Dialog Stack",
  "description": "A dialog stack component",
  "dependencies": [
    "lucide-react",
    "@radix-ui/react-dialog"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "registry/default/components/dialog-stack.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\nimport { X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface DialogContextValue {\n  innerOpen: boolean;\n  setInnerOpen: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst DialogContext = React.createContext<DialogContextValue | undefined>(\n  undefined,\n);\n\nfunction Dialog({ children }: { children: React.ReactNode }) {\n  const [outerOpen, setOuterOpen] = React.useState(false);\n  const [innerOpen, setInnerOpen] = React.useState(false);\n\n  return (\n    <DialogContext.Provider value={{ innerOpen, setInnerOpen }}>\n      <DialogPrimitive.Root open={outerOpen} onOpenChange={setOuterOpen}>\n        {children}\n      </DialogPrimitive.Root>\n    </DialogContext.Provider>\n  );\n}\n\nconst DialogTrigger = DialogPrimitive.Trigger;\nconst DialogPortal = DialogPrimitive.Portal;\nconst DialogClose = DialogPrimitive.Close;\n\nconst DialogOverlay = ({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>) => (\n  <DialogPrimitive.Overlay\n    className={cn(\n      \"bg-background/40 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 backdrop-blur-sm\",\n      className,\n    )}\n    {...props}\n  />\n);\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName;\n\nconst DialogContent = ({\n  className,\n  children,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>) => {\n  const context = React.useContext(DialogContext);\n  if (!context) throw new Error(\"DialogContent must be used within a Dialog\");\n\n  return (\n    <DialogPortal>\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] fixed top-[50%] left-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] rounded-lg border p-6 shadow-lg duration-200 sm:rounded-lg\",\n          context.innerOpen && \"translate-y-[-55%] scale-[0.97]\",\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <DialogClose className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-sm opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-none disabled:pointer-events-none\">\n          <X className=\"h-4 w-4\" />\n          <span className=\"sr-only\">Close</span>\n        </DialogClose>\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  );\n};\nDialogContent.displayName = DialogPrimitive.Content.displayName;\n\nfunction InnerDialog({ children }: { children: React.ReactNode }) {\n  const context = React.useContext(DialogContext);\n  if (!context) throw new Error(\"InnerDialog must be used within a Dialog\");\n\n  React.useEffect(() => {\n    const handleEscapeKeyDown = (event: KeyboardEvent) => {\n      if (event.key === \"Escape\" && context.innerOpen) {\n        context.setInnerOpen(false);\n        event.stopPropagation();\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleEscapeKeyDown);\n    return () => {\n      document.removeEventListener(\"keydown\", handleEscapeKeyDown);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [context.innerOpen, context.setInnerOpen]);\n\n  return (\n    <DialogPrimitive.Root\n      open={context.innerOpen}\n      onOpenChange={context.setInnerOpen}\n    >\n      {children}\n    </DialogPrimitive.Root>\n  );\n}\n\nconst InnerDialogTrigger = DialogPrimitive.Trigger;\nconst InnerDialogClose = DialogPrimitive.Close;\n\ninterface InnerDialogContentProps\n  extends React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content> {\n  position?: \"default\" | \"bottom\" | \"top\" | \"left\" | \"right\";\n  draggable?: boolean;\n}\n\nconst InnerDialogContent = ({\n  className,\n  children,\n  position = \"default\",\n  draggable = false,\n  ...props\n}: InnerDialogContentProps) => {\n  const context = React.useContext(DialogContext);\n  if (!context)\n    throw new Error(\"InnerDialogContent must be used within a Dialog\");\n\n  const [isDragging, setIsDragging] = React.useState(false);\n  const [startY, setStartY] = React.useState(0);\n  const [currentY, setCurrentY] = React.useState(0);\n  const [isClosingByDrag, setIsClosingByDrag] = React.useState(false);\n  const contentRef = React.useRef<HTMLDivElement>(null);\n\n  React.useEffect(() => {\n    if (context.innerOpen) {\n      setCurrentY(0);\n      setIsClosingByDrag(false);\n    }\n  }, [context.innerOpen]);\n\n  const handlePointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\n    if (!draggable) return;\n    setIsDragging(true);\n    setStartY(e.clientY - currentY);\n    e.currentTarget.setPointerCapture(e.pointerId);\n  };\n\n  const handlePointerMove = (e: React.PointerEvent<HTMLDivElement>) => {\n    if (!isDragging || !draggable) return;\n    const newY = e.clientY - startY;\n    setCurrentY(newY > 0 ? newY : 0);\n  };\n\n  const handlePointerUp = () => {\n    if (!draggable) return;\n    setIsDragging(false);\n    if (currentY > (contentRef.current?.offsetHeight || 0) / 2) {\n      setIsClosingByDrag(true);\n      context.setInnerOpen(false);\n    } else {\n      setCurrentY(0);\n    }\n  };\n\n  return (\n    <DialogPortal>\n      <DialogPrimitive.Content\n        onPointerDown={handlePointerDown}\n        onPointerMove={handlePointerMove}\n        onPointerUp={handlePointerUp}\n        style={{\n          transform: `translate(0%, calc(0% + ${currentY + 10}px))`,\n          transition: isDragging ? \"none\" : \"transform 0.3s ease-out\",\n        }}\n        className={cn(\n          \"bg-background fixed top-[50%] left-[50%] z-[75] grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200\",\n          isClosingByDrag\n            ? \"data-[state=closed]:fade-out-0 data-[state=closed]:animate-none\"\n            : \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%]\",\n          position === \"default\" &&\n            \"data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%]\",\n          position === \"bottom\" &&\n            \"data-[state=closed]:slide-out-to-bottom-[10%] data-[state=open]:slide-in-from-bottom-[10%]\",\n          position === \"top\" &&\n            \"data-[state=closed]:slide-out-to-top-full data-[state=open]:slide-in-from-top-full\",\n          position === \"left\" &&\n            \"data-[state=closed]:slide-out-to-left-full data-[state=open]:slide-in-from-left-full\",\n          position === \"right\" &&\n            \"data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-right-full\",\n          draggable && \"\",\n          className,\n        )}\n        {...props}\n      >\n        <div ref={contentRef}>{children}</div>\n        <InnerDialogClose className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-sm opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-none disabled:pointer-events-none\">\n          <X className=\"h-4 w-4\" />\n          <span className=\"sr-only\">Close</span>\n        </InnerDialogClose>\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  );\n};\nInnerDialogContent.displayName = \"InnerDialogContent\";\n\nconst InnerDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className,\n    )}\n    {...props}\n  />\n);\nInnerDialogHeader.displayName = \"InnerDialogHeader\";\n\nconst InnerDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"flex flex-col-reverse sm:flex-row sm:space-x-2\", className)}\n    {...props}\n  />\n);\nInnerDialogFooter.displayName = \"InnerDialogFooter\";\n\nconst InnerDialogTitle = ({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>) => (\n  <DialogPrimitive.Title\n    className={cn(\n      \"text-lg leading-none font-semibold tracking-tight\",\n      className,\n    )}\n    {...props}\n  />\n);\nInnerDialogTitle.displayName = \"InnerDialogTitle\";\n\nconst InnerDialogDescription = ({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>) => (\n  <DialogPrimitive.Description\n    className={cn(\"text-muted-foreground text-sm\", className)}\n    {...props}\n  />\n);\nInnerDialogDescription.displayName = \"InnerDialogDescription\";\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className,\n    )}\n    {...props}\n  />\n);\nDialogHeader.displayName = \"DialogHeader\";\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"flex flex-col-reverse sm:flex-row sm:space-x-2\", className)}\n    {...props}\n  />\n);\nDialogFooter.displayName = \"DialogFooter\";\n\nconst DialogTitle = ({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>) => (\n  <DialogPrimitive.Title\n    className={cn(\n      \"text-lg leading-none font-semibold tracking-tight\",\n      className,\n    )}\n    {...props}\n  />\n);\nDialogTitle.displayName = DialogPrimitive.Title.displayName;\n\nconst DialogDescription = ({\n  className,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>) => (\n  <DialogPrimitive.Description\n    className={cn(\"text-muted-foreground text-sm\", className)}\n    {...props}\n  />\n);\nDialogDescription.displayName = DialogPrimitive.Description.displayName;\n\nexport type { InnerDialogContentProps };\nexport {\n  Dialog,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n  DialogClose,\n  InnerDialog,\n  InnerDialogTrigger,\n  InnerDialogContent,\n  InnerDialogHeader,\n  InnerDialogFooter,\n  InnerDialogTitle,\n  InnerDialogDescription,\n  InnerDialogClose,\n  DialogPortal,\n  DialogOverlay,\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "dialog"
  ]
}