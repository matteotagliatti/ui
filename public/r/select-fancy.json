{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "select-fancy",
  "type": "registry:component",
  "title": "Select Fancy",
  "description": "A fancy select component with a search input, single and multiple select",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "utils",
    "command",
    "popover"
  ],
  "files": [
    {
      "path": "registry/default/components/select-fancy.tsx",
      "content": "\"use client\";\n\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\nimport { useDebounce } from \"@/registry/default/hooks/use-debounce\";\nimport {\n  CheckIcon,\n  ChevronDown,\n  ChevronsUpDown,\n  LoaderCircle,\n} from \"lucide-react\";\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\n\nexport type SelectOption = {\n  value: string;\n  label: string;\n  icon?: React.ReactNode;\n  disabled?: boolean;\n};\n\ntype AsyncProps = {\n  isAsync: true;\n  onSearch: (query: string) => Promise<SelectOption[]>;\n  debounceMs?: number;\n  options?: SelectOption[];\n};\n\ntype SyncProps = {\n  isAsync?: false;\n  onSearch?: never;\n  debounceMs?: never;\n  options: SelectOption[];\n};\n\ntype BaseSelectFancyProps = {\n  disabled?: boolean;\n  placeholder?: string;\n  slim?: boolean;\n  className?: string;\n  searchPlaceholder?: string;\n  emptyMessage?: string;\n  renderOption?: (option: SelectOption, isSelected: boolean) => React.ReactNode;\n  renderSelected?: (option: SelectOption | SelectOption[]) => React.ReactNode;\n} & (AsyncProps | SyncProps);\n\ntype SingleSelectProps = BaseSelectFancyProps & {\n  multiple?: false;\n  onChange?: (option: SelectOption) => void;\n  value?: string;\n};\n\ntype MultipleSelectProps = BaseSelectFancyProps & {\n  multiple: true;\n  onChange: (options: SelectOption[]) => void;\n  value?: string[];\n};\n\ntype Props = SingleSelectProps | MultipleSelectProps;\n\nexport function SelectFancy({\n  options = [],\n  onChange,\n  value,\n  disabled = false,\n  placeholder = \"Select an option\",\n  searchPlaceholder = \"Search...\",\n  emptyMessage = \"No options found.\",\n  slim = false,\n  multiple = false,\n  className,\n  renderOption,\n  renderSelected,\n  isAsync,\n  onSearch,\n  debounceMs = 300,\n  ...props\n}: Props) {\n  const [open, setOpen] = useState(false);\n  const [selectedOptions, setSelectedOptions] = useState<SelectOption[]>([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [asyncOptions, setAsyncOptions] = useState<SelectOption[]>([]);\n  const [forceUpdateKey, setForceUpdateKey] = useState(0);\n  const [shouldFocus, setShouldFocus] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const debouncedSearch = useDebounce(searchQuery, debounceMs);\n\n  const displayOptions = useMemo(() => {\n    if (isAsync) {\n      if (debouncedSearch) {\n        return asyncOptions;\n      }\n\n      return options;\n    }\n\n    if (!searchQuery) {\n      return options;\n    }\n    return options.filter((option) =>\n      option.label.toLowerCase().includes(searchQuery.toLowerCase()),\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    isAsync,\n    asyncOptions,\n    options,\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    ...(isAsync ? [debouncedSearch] : [searchQuery]),\n  ]);\n\n  useEffect(() => {\n    if (!isAsync) {\n      return;\n    }\n\n    const fetchOptions = async () => {\n      setIsLoading(true);\n      try {\n        const results = await onSearch(debouncedSearch);\n\n        const wasFocused = document.activeElement === inputRef.current; // Check if input is focused\n\n        setAsyncOptions(results || []);\n\n        setForceUpdateKey((prev) => prev + 1); // Force a re-render and remember to focus\n        if (wasFocused) {\n          setShouldFocus(true);\n        }\n      } catch (error) {\n        console.error(\"Error fetching options:\", error);\n        setAsyncOptions([]);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    if (debouncedSearch) {\n      fetchOptions();\n    } else {\n      setAsyncOptions([]);\n    }\n  }, [debouncedSearch, isAsync, onSearch]);\n\n  useEffect(() => {\n    if (shouldFocus && inputRef.current && isAsync) {\n      // Focus the input after a small delay to ensure component is rendered\n      setTimeout(() => {\n        if (inputRef.current) {\n          inputRef.current.focus();\n        }\n        setShouldFocus(false);\n      }, 50);\n    }\n  }, [isAsync, shouldFocus, forceUpdateKey]);\n\n  useEffect(() => {\n    if (!value) {\n      if (selectedOptions.length > 0) {\n        setSelectedOptions([]);\n      }\n      return;\n    }\n\n    if (multiple && Array.isArray(value)) {\n      const currentValues = selectedOptions.map((o) => o.value);\n      const hasChanges =\n        value.length !== currentValues.length ||\n        !value.every((v) => currentValues.includes(v));\n\n      if (hasChanges) {\n        const initialOptions = options.filter((option) =>\n          value.includes(option.value),\n        );\n        setSelectedOptions(initialOptions);\n      }\n    } else if (!multiple && typeof value === \"string\") {\n      const currentValue = selectedOptions[0]?.value;\n      if (value !== currentValue) {\n        const initialOption = options.find((option) => option.value === value);\n        setSelectedOptions(initialOption ? [initialOption] : []);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [value, options, multiple]);\n\n  const handleSelect = useCallback(\n    (option: SelectOption) => {\n      if (multiple) {\n        const newSelection = selectedOptions.some(\n          (o) => o.value === option.value,\n        )\n          ? selectedOptions.filter((o) => o.value !== option.value)\n          : [...selectedOptions, option];\n\n        setSelectedOptions(newSelection);\n        (onChange as MultipleSelectProps[\"onChange\"])?.(newSelection);\n      } else {\n        setSelectedOptions([option]);\n        (onChange as SingleSelectProps[\"onChange\"])?.(option);\n        setOpen(false);\n      }\n    },\n    [onChange, multiple, selectedOptions],\n  );\n\n  const defaultRenderOption = (option: SelectOption, isSelected: boolean) => (\n    <div className=\"flex flex-grow items-center gap-2 overflow-hidden\">\n      {option.icon && (\n        <div className=\"inline-flex h-5 w-5 shrink-0 items-center justify-center\">\n          {option.icon}\n        </div>\n      )}\n      <span className=\"overflow-hidden text-ellipsis whitespace-nowrap\">\n        {option.label}\n      </span>\n      <CheckIcon\n        className={cn(\n          \"ml-auto h-4 w-4 shrink-0\",\n          isSelected ? \"opacity-100\" : \"opacity-0\",\n        )}\n      />\n    </div>\n  );\n\n  const defaultRenderSelected = (selected: SelectOption | SelectOption[]) => {\n    if (Array.isArray(selected)) {\n      return (\n        <span className=\"overflow-hidden text-ellipsis whitespace-nowrap\">\n          {selected.length} selected\n        </span>\n      );\n    }\n\n    return (\n      <div className=\"flex items-center gap-2 overflow-hidden\">\n        {selected.icon && (\n          <div className=\"inline-flex h-4 w-4 shrink-0 items-center justify-center\">\n            {selected.icon}\n          </div>\n        )}\n        {slim === false && (\n          <span className=\"overflow-hidden text-ellipsis whitespace-nowrap\">\n            {selected.label}\n          </span>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger\n        className={cn(\n          \"border-input ring-offset-background placeholder:text-muted-foreground hover:bg-secondary/80 flex h-9 w-full items-center justify-between rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-sm focus:outline-none disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n          slim && \"w-min gap-1\",\n          className,\n        )}\n        disabled={disabled}\n        {...props}\n      >\n        {selectedOptions.length > 0 ? (\n          <div className=\"flex flex-grow items-center gap-2 overflow-hidden\">\n            {renderSelected\n              ? renderSelected(multiple ? selectedOptions : selectedOptions[0])\n              : defaultRenderSelected(\n                  multiple ? selectedOptions : selectedOptions[0],\n                )}\n          </div>\n        ) : (\n          <span className=\"flex items-center gap-2\">{placeholder}</span>\n        )}\n\n        {!slim ? (\n          <ChevronDown size={16} />\n        ) : (\n          <ChevronsUpDown size={16} className=\"text-muted-foreground\" />\n        )}\n      </PopoverTrigger>\n      <PopoverContent\n        collisionPadding={10}\n        side=\"bottom\"\n        className=\"min-w-[--radix-popper-anchor-width] p-0\"\n      >\n        <Command\n          key={forceUpdateKey}\n          className=\"max-h-[200px] w-full sm:max-h-[270px]\"\n          shouldFilter={!isAsync}\n        >\n          <CommandList>\n            <div className=\"bg-popover sticky top-0 z-10\">\n              <CommandInput\n                ref={inputRef}\n                placeholder={searchPlaceholder}\n                value={searchQuery}\n                onValueChange={setSearchQuery}\n              />\n            </div>\n\n            {isLoading ? (\n              <div className=\"text-muted-foreground py-6 text-center text-sm\">\n                <LoaderCircle className=\"mx-auto mb-1 size-4 animate-spin opacity-60\" />\n                <p>Searching...</p>\n              </div>\n            ) : (\n              <>\n                {displayOptions.length > 0 ? (\n                  <CommandGroup>\n                    {displayOptions.map((option, index) => (\n                      <CommandItem\n                        key={option.value || index}\n                        onSelect={() => handleSelect(option)}\n                        disabled={option.disabled}\n                      >\n                        {renderOption\n                          ? renderOption(\n                              option,\n                              selectedOptions.some(\n                                (o) => o.value === option.value,\n                              ),\n                            )\n                          : defaultRenderOption(\n                              option,\n                              selectedOptions.some(\n                                (o) => o.value === option.value,\n                              ),\n                            )}\n                      </CommandItem>\n                    ))}\n                  </CommandGroup>\n                ) : (\n                  <CommandEmpty>{emptyMessage}</CommandEmpty>\n                )}\n              </>\n            )}\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/hooks/use-debounce.ts",
      "content": "import { useEffect, useState } from \"react\";\n\nexport function useDebounce<T>(value: T, delay?: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(() => {\n    const timer = setTimeout(() => setDebouncedValue(value), delay || 500);\n    return () => clearTimeout(timer);\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n",
      "type": "registry:hook"
    }
  ],
  "categories": [
    "input"
  ]
}