{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "select-fancy",
  "type": "registry:component",
  "title": "Select Fancy",
  "description": "A fancy select component with a search input, single and multiple select",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "utils",
    "command",
    "popover"
  ],
  "files": [
    {
      "path": "registry/default/components/select-fancy.tsx",
      "content": "\"use client\";\n\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  Command,\n} from \"@/components/ui/command\";\nimport {\n  PopoverContent,\n  Popover,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Check, ChevronDown, Loader2, Trash } from \"lucide-react\";\nimport { useDebounce } from \"../hooks/use-debounce\";\nimport { Button } from \"@/components/ui/button\";\n\ntype SelectFancyOption = {\n  value: string;\n  label: string;\n  disabled?: boolean;\n  description?: string;\n  icon?: React.ReactNode;\n};\n\ntype SelectFancyBaseProps = {\n  className?: string;\n  placeholder?: string;\n  disabled?: boolean;\n  emptyText?: string;\n  inputPlaceholder?: string;\n  required?: boolean;\n};\n\ntype SelectFancyProps = {\n  options: SelectFancyOption[];\n  value: string;\n  onValueChange: (value: string) => void;\n} & SelectFancyBaseProps;\n\nfunction SelectFancy({\n  options,\n  value,\n  onValueChange,\n  placeholder,\n  disabled,\n  emptyText,\n  inputPlaceholder,\n  className,\n  required,\n}: SelectFancyProps) {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <Popover modal={false} open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className={cn(\"w-full justify-between\", className)}\n          disabled={disabled}\n        >\n          {value ? (\n            options.find((option) => option.value === value)?.label\n          ) : (\n            <span className=\"text-muted-foreground\">\n              {placeholder || \"Select an option\"}\n            </span>\n          )}\n\n          {value && !required ? (\n            <Trash\n              className=\"text-destructive size-4 shrink-0 cursor-pointer\"\n              onClick={(e) => {\n                e.stopPropagation();\n                e.preventDefault();\n                onValueChange(\"\");\n              }}\n            />\n          ) : (\n            <ChevronDown className=\"text-muted-foreground shrink-0\" />\n          )}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[var(--radix-popover-trigger-width)] p-0\">\n        <Command>\n          <CommandInput\n            placeholder={inputPlaceholder || \"Search\"}\n            className=\"h-9\"\n          />\n          <CommandList>\n            <CommandEmpty>{emptyText || \"No options found\"}</CommandEmpty>\n            <CommandGroup>\n              {options.map((option) => (\n                <CommandItem\n                  key={option.value}\n                  value={option.value}\n                  onSelect={(currentValue) => {\n                    onValueChange(currentValue === value ? \"\" : currentValue);\n                    setOpen(false);\n                  }}\n                >\n                  {option.label}\n                  <Check\n                    className={cn(\n                      \"ml-auto\",\n                      value === option.value ? \"opacity-100\" : \"opacity-0\",\n                    )}\n                  />\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n\ntype SelectFancyMultipleProps = {\n  options: SelectFancyOption[];\n  value: string[];\n  onValueChange: (value: string[]) => void;\n} & SelectFancyBaseProps;\n\nfunction SelectFancyMultiple({\n  options,\n  value,\n  onValueChange,\n  placeholder,\n  emptyText,\n  inputPlaceholder,\n  className,\n  disabled,\n  required,\n}: SelectFancyMultipleProps) {\n  const [open, setOpen] = useState(false);\n\n  const handleSelect = useCallback(\n    (optionValue: string) => {\n      const updatedSelected = value.includes(optionValue)\n        ? value.filter((item) => item !== optionValue)\n        : [...value, optionValue];\n      onValueChange(updatedSelected);\n    },\n    [value, onValueChange],\n  );\n\n  const selectedLabels = useMemo(\n    () =>\n      value\n        .map(\n          (optionValue) =>\n            options.find((option) => option.value === optionValue)?.label,\n        )\n        .filter(Boolean)\n        .join(\", \"),\n    [value, options],\n  );\n\n  return (\n    <Popover modal={false} open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className={cn(\"w-full justify-between\", className)}\n          disabled={disabled}\n        >\n          <span className=\"truncate\">\n            {value.length > 0 ? (\n              selectedLabels\n            ) : (\n              <span className=\"text-muted-foreground\">\n                {placeholder || \"Select an option\"}\n              </span>\n            )}\n          </span>\n          {value.length > 0 && !required ? (\n            <Trash\n              className=\"text-destructive size-4 shrink-0 cursor-pointer\"\n              onClick={(e) => {\n                e.stopPropagation();\n                e.preventDefault();\n                onValueChange([]);\n              }}\n            />\n          ) : (\n            <ChevronDown className=\"text-muted-foreground shrink-0\" />\n          )}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[var(--radix-popover-trigger-width)] p-0\">\n        <Command>\n          <CommandInput\n            placeholder={inputPlaceholder || \"Search\"}\n            className=\"h-9\"\n          />\n          <CommandList>\n            <CommandEmpty>{emptyText || \"No options found\"}</CommandEmpty>\n            <CommandGroup>\n              {options.map((option) => (\n                <CommandItem\n                  key={option.value}\n                  value={option.value}\n                  onSelect={() => handleSelect(option.value)}\n                >\n                  {option.label}\n                  <Check\n                    className={cn(\n                      \"ml-auto\",\n                      value.includes(option.value)\n                        ? \"opacity-100\"\n                        : \"opacity-0\",\n                    )}\n                  />\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n\ntype SelectFancyAsyncProps<T> = {\n  onSearch: (query?: string) => Promise<T[]>;\n  getInitialOptions?: () => Promise<T[]>;\n  preload?: boolean;\n  filterFn?: (option: T, query: string) => boolean;\n  renderOption: (option: T) => React.ReactNode;\n  getOptionValue: (option: T) => string;\n  getDisplayValue: (option: T) => React.ReactNode;\n  value: string;\n  onValueChange: (value: string) => void;\n} & SelectFancyBaseProps;\n\nfunction SelectFancyAsync<T>({\n  onSearch,\n  getInitialOptions,\n  preload,\n  filterFn,\n  renderOption,\n  getOptionValue,\n  getDisplayValue,\n  emptyText,\n  placeholder,\n  value,\n  onValueChange,\n  disabled = false,\n  className,\n  inputPlaceholder,\n  required,\n}: SelectFancyAsyncProps<T>) {\n  const [mounted, setMounted] = useState(false);\n  const [open, setOpen] = useState(false);\n  const [options, setOptions] = useState<T[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedValue, setSelectedValue] = useState(value);\n  const [selectedOption, setSelectedOption] = useState<T | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const debouncedSearchTerm = useDebounce(searchTerm, preload ? 0 : 300);\n  const [originalOptions, setOriginalOptions] = useState<T[]>([]);\n\n  useEffect(() => {\n    setMounted(true);\n    setSelectedValue(value);\n  }, [value]);\n\n  // Initialize selectedOption when options are loaded and value exists\n  useEffect(() => {\n    if (value && options.length > 0) {\n      const option = options.find((opt) => getOptionValue(opt) === value);\n      if (option) {\n        setSelectedOption(option);\n      }\n    }\n  }, [value, options, getOptionValue]);\n\n  // Effect for initial fetch\n  useEffect(() => {\n    const initializeOptions = async () => {\n      try {\n        setLoading(true);\n        const data = await (getInitialOptions\n          ? getInitialOptions()\n          : onSearch(value));\n        setOriginalOptions(data);\n        setOptions(data);\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (!mounted) {\n      initializeOptions();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [mounted, onSearch, getInitialOptions]);\n\n  useEffect(() => {\n    const searchOptions = async () => {\n      try {\n        setLoading(true);\n        const data = await onSearch(debouncedSearchTerm);\n        setOriginalOptions(data);\n        setOptions(data);\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (!mounted) {\n      searchOptions();\n    } else if (!preload) {\n      searchOptions();\n    } else if (preload) {\n      if (debouncedSearchTerm) {\n        setOptions(\n          originalOptions.filter((option) =>\n            filterFn ? filterFn(option, debouncedSearchTerm) : true,\n          ),\n        );\n      } else {\n        setOptions(originalOptions);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [onSearch, debouncedSearchTerm, mounted, preload, filterFn]);\n\n  const handleSelect = useCallback(\n    (currentValue: string) => {\n      const newValue = currentValue === selectedValue ? \"\" : currentValue;\n      setSelectedValue(newValue);\n      setSelectedOption(\n        options.find((option) => getOptionValue(option) === newValue) || null,\n      );\n      onValueChange(newValue);\n      setOpen(false);\n    },\n    [selectedValue, onValueChange, options, getOptionValue],\n  );\n\n  return (\n    <Popover modal={true} open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className={cn(\"w-full justify-between\", className)}\n          disabled={disabled}\n        >\n          <span className=\"truncate\">\n            {selectedOption ? (\n              getDisplayValue(selectedOption)\n            ) : (\n              <span className=\"text-muted-foreground\">\n                {placeholder || \"Select an option\"}\n              </span>\n            )}\n          </span>\n          {selectedValue && !required ? (\n            <Trash\n              className=\"text-destructive size-4 shrink-0 cursor-pointer\"\n              onClick={(e) => {\n                e.stopPropagation();\n                e.preventDefault();\n                setSelectedValue(\"\");\n                setSelectedOption(null);\n                onValueChange(\"\");\n              }}\n            />\n          ) : (\n            <ChevronDown className=\"text-muted-foreground shrink-0\" />\n          )}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[var(--radix-popover-trigger-width)] p-0\">\n        <Command shouldFilter={false}>\n          <div className=\"relative\">\n            <CommandInput\n              className=\"relative\"\n              placeholder={inputPlaceholder || \"Search\"}\n              value={searchTerm}\n              onValueChange={(value) => {\n                setSearchTerm(value);\n              }}\n            />\n            {loading && open && (\n              <div className=\"absolute top-1/2 right-2 flex -translate-y-1/2 transform items-center opacity-50\">\n                <Loader2 className=\"animate-spin\" />\n              </div>\n            )}\n          </div>\n\n          <CommandList>\n            {!loading && options.length === 0 && (\n              <CommandEmpty>{emptyText ?? \"No options found\"}</CommandEmpty>\n            )}\n            <CommandGroup>\n              {options.map((option) => (\n                <CommandItem\n                  key={getOptionValue(option)}\n                  value={getOptionValue(option)}\n                  onSelect={handleSelect}\n                >\n                  {renderOption(option)}\n                  <Check\n                    className={cn(\n                      \"ml-auto\",\n                      selectedValue === getOptionValue(option)\n                        ? \"opacity-100\"\n                        : \"opacity-0\",\n                    )}\n                  />\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n\nexport {\n  SelectFancy,\n  type SelectFancyProps,\n  SelectFancyMultiple,\n  type SelectFancyMultipleProps,\n  SelectFancyAsync,\n  type SelectFancyAsyncProps,\n  type SelectFancyOption,\n};\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/hooks/use-debounce.ts",
      "content": "import { useEffect, useState } from \"react\";\n\nexport function useDebounce<T>(value: T, delay?: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(() => {\n    const timer = setTimeout(() => setDebouncedValue(value), delay || 500);\n    return () => clearTimeout(timer);\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n",
      "type": "registry:hook"
    }
  ],
  "categories": [
    "input"
  ]
}