{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input-datetime",
  "type": "registry:component",
  "title": "Input Datetime",
  "description": "A input component with a date and time picker",
  "dependencies": [
    "react-day-picker",
    "date-fns"
  ],
  "registryDependencies": [
    "utils",
    "input",
    "popover",
    "scroll-area",
    "button",
    "select"
  ],
  "files": [
    {
      "path": "registry/default/components/input-datetime.tsx",
      "content": "\"use client\";\n\nimport { CalendarIcon } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/registry/default/components/calendar\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\ninterface Props {\n  time?: string;\n  date?: Date | null;\n  onChange?: (date: Date | null) => void;\n}\n\nexport function InputDatetime({\n  time: initialTime = \"05:00\",\n  date: initialDate = null,\n  onChange,\n}: Props) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [time, setTime] = useState<string>(initialTime);\n  const [date, setDate] = useState<Date | null>(initialDate);\n  const [selectedDateTime, setSelectedDateTime] = useState<Date | null>(\n    initialDate,\n  );\n\n  const handleDateSelect = (selectedDate: Date | undefined) => {\n    if (!selectedDate) return;\n\n    const [hours, minutes] = time.split(\":\");\n    selectedDate.setHours(parseInt(hours), parseInt(minutes));\n\n    setDate(selectedDate);\n    setSelectedDateTime(selectedDate);\n    if (onChange) onChange(selectedDate);\n    setIsOpen(false);\n  };\n\n  const handleTimeChange = (timeValue: string) => {\n    setTime(timeValue);\n\n    if (date) {\n      const [hours, minutes] = timeValue.split(\":\");\n      const newDate = new Date(date.getTime());\n      newDate.setHours(parseInt(hours), parseInt(minutes));\n\n      setDate(newDate);\n      setSelectedDateTime(newDate);\n      if (onChange) onChange(newDate);\n    }\n  };\n\n  return (\n    <div className=\"w-[220px] space-y-2\">\n      <div className=\"flex w-full flex-col\">\n        <Popover open={isOpen} onOpenChange={setIsOpen}>\n          <PopoverTrigger asChild>\n            <Button\n              variant=\"outline\"\n              className={cn(\n                \"w-full justify-start text-left font-normal\",\n                !selectedDateTime && \"text-muted-foreground\",\n              )}\n            >\n              {selectedDateTime ? (\n                `${format(selectedDateTime, \"PPP\")}, ${time}`\n              ) : (\n                <span>Pick a date</span>\n              )}\n              <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent\n            className=\"bg-popover border-border w-auto p-0\"\n            align=\"start\"\n          >\n            <Calendar\n              mode=\"single\"\n              captionLayout=\"dropdown\"\n              selected={date || undefined}\n              onSelect={handleDateSelect}\n              defaultMonth={date || new Date()}\n              className=\"bg-popover text-foreground\"\n            />\n          </PopoverContent>\n        </Popover>\n      </div>\n\n      <div className=\"flex flex-col\">\n        <Select value={time} onValueChange={handleTimeChange}>\n          <SelectTrigger className=\"bg-background border-border text-foreground w-[120px] font-normal focus:ring-0 focus:ring-offset-0\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent className=\"bg-popover text-foreground border-border\">\n            <ScrollArea className=\"h-[15rem]\">\n              {Array.from({ length: 96 }).map((_, i) => {\n                const hour = Math.floor(i / 4)\n                  .toString()\n                  .padStart(2, \"0\");\n                const minute = ((i % 4) * 15).toString().padStart(2, \"0\");\n                return (\n                  <SelectItem\n                    key={i}\n                    value={`${hour}:${minute}`}\n                    className=\"text-foreground hover:bg-accent hover:text-accent-foreground\"\n                  >\n                    {hour}:{minute}\n                  </SelectItem>\n                );\n              })}\n            </ScrollArea>\n          </SelectContent>\n        </Select>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/components/calendar.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { DayPicker, Dropdown as DropDownDayPicker } from \"react-day-picker\";\nimport { buttonVariants } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { cn } from \"@/lib/utils\";\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker> & {\n  captionLabelClassName?: string;\n  dayClassName?: string;\n  dayButtonClassName?: string;\n  dropdownsClassName?: string;\n  footerClassName?: string;\n  monthClassName?: string;\n  monthCaptionClassName?: string;\n  monthGridClassName?: string;\n  monthsClassName?: string;\n  weekClassName?: string;\n  weekdayClassName?: string;\n  weekdaysClassName?: string;\n  rangeEndClassName?: string;\n  rangeMiddleClassName?: string;\n  rangeStartClassName?: string;\n  selectedClassName?: string;\n  disabledClassName?: string;\n  hiddenClassName?: string;\n  outsideClassName?: string;\n  todayClassName?: string;\n  selectTriggerClassName?: string;\n};\n\nfunction Calendar({\n  className,\n  classNames,\n  hideNavigation,\n  showOutsideDays = true,\n  components: customComponents,\n  ...props\n}: CalendarProps) {\n  const _monthsClassName = cn(\n    \"relative flex flex-col gap-4 sm:flex-row\",\n    props.monthsClassName,\n  );\n  const _monthCaptionClassName = cn(\n    \"relative flex h-7 items-center justify-center\",\n    props.monthCaptionClassName,\n  );\n  const _dropdownsClassName = cn(\n    \"flex w-full items-center justify-between gap-2\",\n    hideNavigation ? \"w-full\" : \"\",\n    props.dropdownsClassName,\n  );\n  const _footerClassName = cn(\"pt-3 text-sm\", props.footerClassName);\n  const _weekdaysClassName = cn(\"flex\", props.weekdaysClassName);\n  const _weekdayClassName = cn(\n    \"text-muted-foreground w-9 text-sm font-normal\",\n    props.weekdayClassName,\n  );\n  const _captionLabelClassName = cn(\n    \"truncate text-sm font-medium\",\n    props.captionLabelClassName,\n  );\n\n  const _monthGridClassName = cn(\"mx-auto mt-4\", props.monthGridClassName);\n  const _weekClassName = cn(\"mt-2 flex w-max items-start\", props.weekClassName);\n  const _dayClassName = cn(\n    \"flex size-9 flex-1 items-center justify-center p-0 text-sm\",\n    props.dayClassName,\n  );\n  const _dayButtonClassName = cn(\n    buttonVariants({ variant: \"ghost\" }),\n    \"size-9 rounded-md p-0 font-normal transition-none aria-selected:opacity-100\",\n    props.dayButtonClassName,\n  );\n\n  const buttonRangeClassName =\n    \"bg-accent [&>button]:bg-primary [&>button]:text-primary-foreground [&>button]:hover:bg-primary [&>button]:hover:text-primary-foreground\";\n  const _rangeStartClassName = cn(\n    buttonRangeClassName,\n    \"rounded-s-md\",\n    props.rangeStartClassName,\n  );\n  const _rangeEndClassName = cn(\n    buttonRangeClassName,\n    \"rounded-e-md\",\n    props.rangeEndClassName,\n  );\n  const _rangeMiddleClassName = cn(\n    \"bg-accent !text-foreground [&>button]:!text-foreground [&>button]:hover:!text-foreground [&>button]:bg-transparent [&>button]:hover:bg-transparent\",\n    props.rangeMiddleClassName,\n  );\n  const _selectedClassName = cn(\n    \"[&>button]:bg-primary [&>button]:text-primary-foreground [&>button]:hover:bg-primary [&>button]:hover:text-primary-foreground\",\n    props.selectedClassName,\n  );\n  const _todayClassName = cn(\n    \"[&>button]:bg-accent [&>button]:text-accent-foreground\",\n    props.todayClassName,\n  );\n  const _outsideClassName = cn(\n    \"text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground opacity-50 aria-selected:opacity-30\",\n    props.outsideClassName,\n  );\n  const _disabledClassName = cn(\n    \"text-muted-foreground opacity-50\",\n    props.disabledClassName,\n  );\n  const _hiddenClassName = cn(\"invisible flex-1\", props.hiddenClassName);\n\n  const Dropdown = React.useCallback(\n    ({\n      value,\n      onChange,\n      options,\n    }: React.ComponentProps<typeof DropDownDayPicker>) => {\n      const selected = options?.find((option) => option.value === value);\n      const handleChange = (value: string) => {\n        const changeEvent = {\n          target: { value },\n        } as React.ChangeEvent<HTMLSelectElement>;\n        onChange?.(changeEvent);\n      };\n      return (\n        <Select\n          value={value?.toString()}\n          onValueChange={(value) => {\n            handleChange(value);\n          }}\n        >\n          <SelectTrigger className=\"w-full outline-none focus:ring-0 focus:ring-offset-0\">\n            <SelectValue>{selected?.label}</SelectValue>\n          </SelectTrigger>\n          <SelectContent position=\"popper\" align=\"center\">\n            <ScrollArea className=\"h-80\">\n              {options?.map(({ value, label, disabled }, id) => (\n                <SelectItem\n                  key={`${value}-${id}`}\n                  value={value?.toString()}\n                  disabled={disabled}\n                >\n                  {label}\n                </SelectItem>\n              ))}\n            </ScrollArea>\n          </SelectContent>\n        </Select>\n      );\n    },\n    [],\n  );\n\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      hideNavigation={true} // Ensure navigation is hidden\n      className={cn(\"p-3\", className)}\n      classNames={{\n        caption_label: _captionLabelClassName,\n        day: _dayClassName,\n        day_button: _dayButtonClassName,\n        dropdowns: _dropdownsClassName,\n        footer: _footerClassName,\n        month: props.monthClassName,\n        month_caption: _monthCaptionClassName,\n        month_grid: _monthGridClassName,\n        months: _monthsClassName,\n        week: _weekClassName,\n        weekday: _weekdayClassName,\n        weekdays: _weekdaysClassName,\n        range_end: _rangeEndClassName,\n        range_middle: _rangeMiddleClassName,\n        range_start: _rangeStartClassName,\n        selected: _selectedClassName,\n        disabled: _disabledClassName,\n        hidden: _hiddenClassName,\n        outside: _outsideClassName,\n        today: _todayClassName,\n        nav: \"hidden\", // This hides the navigation (chevrons)\n        ...classNames,\n      }}\n      components={{\n        Dropdown,\n        ...customComponents,\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = \"Calendar\";\n\nexport { Calendar };\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "input"
  ]
}