{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input-time",
  "type": "registry:component",
  "title": "Input Time",
  "description": "A time input component",
  "registryDependencies": [
    "utils",
    "input"
  ],
  "files": [
    {
      "path": "registry/default/components/input-time.tsx",
      "content": "import { Input } from \"@/components/ui/input\";\nimport { cn } from \"@/lib/utils\";\nimport React, { Ref, useEffect, useMemo, useState } from \"react\";\n\nexport type TimePickerType = \"minutes\" | \"seconds\" | \"hours\" | \"12hours\";\nexport type Period = \"AM\" | \"PM\";\n\nexport interface InputTimeProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {\n  picker: TimePickerType;\n  date: Date | undefined;\n  setDate: (date: Date | undefined) => void;\n  period?: Period;\n  onRightFocus?: () => void;\n  onLeftFocus?: () => void;\n  ref?: Ref<HTMLInputElement>;\n}\n\nconst InputTime = ({\n  className,\n  type = \"tel\",\n  value,\n  id,\n  name,\n  date = new Date(new Date().setHours(0, 0, 0, 0)),\n  setDate,\n  onChange,\n  onKeyDown,\n  picker,\n  period,\n  onLeftFocus,\n  onRightFocus,\n  ref,\n  ...props\n}: InputTimeProps) => {\n  const [flag, setFlag] = useState<boolean>(false);\n  const [prevIntKey, setPrevIntKey] = useState<string>(\"0\");\n\n  /**\n   * allow the user to enter the second digit within 2 seconds\n   * otherwise start again with entering first digit\n   */\n  useEffect(() => {\n    if (flag) {\n      const timer = setTimeout(() => {\n        setFlag(false);\n      }, 2000);\n\n      return () => clearTimeout(timer);\n    }\n  }, [flag]);\n\n  const calculatedValue = useMemo(() => {\n    return getDateByType(date, picker);\n  }, [date, picker]);\n\n  const calculateNewValue = (key: string) => {\n    /*\n     * If picker is '12hours' and the first digit is 0, then the second digit is automatically set to 1.\n     * The second entered digit will break the condition and the value will be set to 10-12.\n     */\n    if (picker === \"12hours\") {\n      if (flag && calculatedValue.slice(1, 2) === \"1\" && prevIntKey === \"0\")\n        return \"0\" + key;\n    }\n\n    return !flag ? \"0\" + key : calculatedValue.slice(1, 2) + key;\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Tab\") return;\n    e.preventDefault();\n    if (e.key === \"ArrowRight\") onRightFocus?.();\n    if (e.key === \"ArrowLeft\") onLeftFocus?.();\n    if ([\"ArrowUp\", \"ArrowDown\"].includes(e.key)) {\n      const step = e.key === \"ArrowUp\" ? 1 : -1;\n      const newValue = getArrowByType(calculatedValue, step, picker);\n      if (flag) setFlag(false);\n      const tempDate = new Date(date);\n      setDate(setDateByType(tempDate, newValue, picker, period));\n    }\n    if (e.key >= \"0\" && e.key <= \"9\") {\n      if (picker === \"12hours\") setPrevIntKey(e.key);\n\n      const newValue = calculateNewValue(e.key);\n      if (flag) onRightFocus?.();\n      setFlag((prev) => !prev);\n      const tempDate = new Date(date);\n      setDate(setDateByType(tempDate, newValue, picker, period));\n    }\n  };\n\n  return (\n    <Input\n      ref={ref}\n      id={id || picker}\n      name={name || picker}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground w-[48px] text-center font-mono text-base tabular-nums caret-transparent [&::-webkit-inner-spin-button]:appearance-none\",\n        className,\n      )}\n      value={value || calculatedValue}\n      onChange={(e) => {\n        e.preventDefault();\n        onChange?.(e);\n      }}\n      type={type}\n      inputMode=\"decimal\"\n      onKeyDown={(e) => {\n        onKeyDown?.(e);\n        handleKeyDown(e);\n      }}\n      {...props}\n    />\n  );\n};\n\nexport { InputTime };\n\n/**\n * regular expression to check for valid hour format (01-23)\n */\nexport function isValidHour(value: string) {\n  return /^(0[0-9]|1[0-9]|2[0-3])$/.test(value);\n}\n\n/**\n * regular expression to check for valid 12 hour format (01-12)\n */\nexport function isValid12Hour(value: string) {\n  return /^(0[1-9]|1[0-2])$/.test(value);\n}\n\n/**\n * regular expression to check for valid minute format (00-59)\n */\nexport function isValidMinuteOrSecond(value: string) {\n  return /^[0-5][0-9]$/.test(value);\n}\n\ntype GetValidNumberConfig = { max: number; min?: number; loop?: boolean };\n\nexport function getValidNumber(\n  value: string,\n  { max, min = 0, loop = false }: GetValidNumberConfig,\n) {\n  let numericValue = parseInt(value, 10);\n\n  if (!isNaN(numericValue)) {\n    if (!loop) {\n      if (numericValue > max) numericValue = max;\n      if (numericValue < min) numericValue = min;\n    } else {\n      if (numericValue > max) numericValue = min;\n      if (numericValue < min) numericValue = max;\n    }\n    return numericValue.toString().padStart(2, \"0\");\n  }\n\n  return \"00\";\n}\n\nexport function getValidHour(value: string) {\n  if (isValidHour(value)) return value;\n  return getValidNumber(value, { max: 23 });\n}\n\nexport function getValid12Hour(value: string) {\n  if (isValid12Hour(value)) return value;\n  return getValidNumber(value, { min: 1, max: 12 });\n}\n\nexport function getValidMinuteOrSecond(value: string) {\n  if (isValidMinuteOrSecond(value)) return value;\n  return getValidNumber(value, { max: 59 });\n}\n\ntype GetValidArrowNumberConfig = {\n  min: number;\n  max: number;\n  step: number;\n};\n\nexport function getValidArrowNumber(\n  value: string,\n  { min, max, step }: GetValidArrowNumberConfig,\n) {\n  let numericValue = parseInt(value, 10);\n  if (!isNaN(numericValue)) {\n    numericValue += step;\n    return getValidNumber(String(numericValue), { min, max, loop: true });\n  }\n  return \"00\";\n}\n\nexport function getValidArrowHour(value: string, step: number) {\n  return getValidArrowNumber(value, { min: 0, max: 23, step });\n}\n\nexport function getValidArrow12Hour(value: string, step: number) {\n  return getValidArrowNumber(value, { min: 1, max: 12, step });\n}\n\nexport function getValidArrowMinuteOrSecond(value: string, step: number) {\n  return getValidArrowNumber(value, { min: 0, max: 59, step });\n}\n\nexport function setMinutes(date: Date, value: string) {\n  const minutes = getValidMinuteOrSecond(value);\n  date.setMinutes(parseInt(minutes, 10));\n  return date;\n}\n\nexport function setSeconds(date: Date, value: string) {\n  const seconds = getValidMinuteOrSecond(value);\n  date.setSeconds(parseInt(seconds, 10));\n  return date;\n}\n\nexport function setHours(date: Date, value: string) {\n  const hours = getValidHour(value);\n  date.setHours(parseInt(hours, 10));\n  return date;\n}\n\nexport function set12Hours(date: Date, value: string, period: Period) {\n  const hours = parseInt(getValid12Hour(value), 10);\n  const convertedHours = convert12HourTo24Hour(hours, period);\n  date.setHours(convertedHours);\n  return date;\n}\n\nexport function setDateByType(\n  date: Date,\n  value: string,\n  type: TimePickerType,\n  period?: Period,\n) {\n  switch (type) {\n    case \"minutes\":\n      return setMinutes(date, value);\n    case \"seconds\":\n      return setSeconds(date, value);\n    case \"hours\":\n      return setHours(date, value);\n    case \"12hours\": {\n      if (!period) return date;\n      return set12Hours(date, value, period);\n    }\n    default:\n      return date;\n  }\n}\n\nexport function getDateByType(date: Date, type: TimePickerType) {\n  switch (type) {\n    case \"minutes\":\n      return getValidMinuteOrSecond(String(date.getMinutes()));\n    case \"seconds\":\n      return getValidMinuteOrSecond(String(date.getSeconds()));\n    case \"hours\":\n      return getValidHour(String(date.getHours()));\n    case \"12hours\":\n      const hours = display12HourValue(date.getHours());\n      return getValid12Hour(String(hours));\n    default:\n      return \"00\";\n  }\n}\n\nexport function getArrowByType(\n  value: string,\n  step: number,\n  type: TimePickerType,\n) {\n  switch (type) {\n    case \"minutes\":\n      return getValidArrowMinuteOrSecond(value, step);\n    case \"seconds\":\n      return getValidArrowMinuteOrSecond(value, step);\n    case \"hours\":\n      return getValidArrowHour(value, step);\n    case \"12hours\":\n      return getValidArrow12Hour(value, step);\n    default:\n      return \"00\";\n  }\n}\n\n/**\n * handles value change of 12-hour input\n * 12:00 PM is 12:00\n * 12:00 AM is 00:00\n */\nexport function convert12HourTo24Hour(hour: number, period: Period) {\n  if (period === \"PM\") {\n    if (hour <= 11) {\n      return hour + 12;\n    } else {\n      return hour;\n    }\n  } else if (period === \"AM\") {\n    if (hour === 12) return 0;\n    return hour;\n  }\n  return hour;\n}\n\n/**\n * time is stored in the 24-hour form,\n * but needs to be displayed to the user\n * in its 12-hour representation\n */\nexport function display12HourValue(hours: number) {\n  if (hours === 0 || hours === 12) return \"12\";\n  if (hours >= 22) return `${hours - 12}`;\n  if (hours % 12 > 9) return `${hours}`;\n  return `0${hours % 12}`;\n}\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "input"
  ]
}