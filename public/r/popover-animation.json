{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "popover-animation",
  "type": "registry:component",
  "title": "Popover Animation",
  "description": "A popover animation component",
  "dependencies": [
    "motion",
    "lucide-react"
  ],
  "registryDependencies": [
    "utils",
    "button"
  ],
  "files": [
    {
      "path": "registry/default/components/popover-animation.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { AnimatePresence, MotionConfig, motion } from \"motion/react\";\nimport { X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  createContext,\n  useContext,\n  useId,\n  useRef,\n  useEffect,\n  type ReactNode,\n  useState,\n  FormEvent,\n} from \"react\";\n\nconst TRANSITION = {\n  type: \"spring\",\n  bounce: 0.05,\n  duration: 0.3,\n};\n\ninterface PopoverContextType {\n  isOpen: boolean;\n  openPopover: () => void;\n  closePopover: () => void;\n  uniqueId: string;\n}\n\nconst PopoverContext = createContext<PopoverContextType | undefined>(undefined);\n\nfunction usePopover() {\n  const context = useContext(PopoverContext);\n  if (!context) {\n    throw new Error(\"usePopover must be used within a PopoverProvider\");\n  }\n  return context;\n}\n\nfunction usePopoverLogic() {\n  const uniqueId = useId();\n  const [isOpen, setIsOpen] = useState(false);\n\n  const openPopover = () => setIsOpen(true);\n  const closePopover = () => {\n    setIsOpen(false);\n  };\n\n  return { isOpen, openPopover, closePopover, uniqueId };\n}\n\ninterface PopoverRootProps {\n  children: ReactNode;\n  className?: string;\n}\n\nfunction PopoverRoot({ children, className }: PopoverRootProps) {\n  const popoverLogic = usePopoverLogic();\n\n  return (\n    <PopoverContext.Provider value={popoverLogic}>\n      <MotionConfig transition={TRANSITION}>\n        <div\n          className={cn(\n            \"relative isolate flex items-center justify-center\",\n            className,\n          )}\n        >\n          {children}\n        </div>\n      </MotionConfig>\n    </PopoverContext.Provider>\n  );\n}\n\ninterface PopoverTriggerProps {\n  children: ReactNode;\n  className?: string;\n  variant?:\n    | \"default\"\n    | \"destructive\"\n    | \"outline\"\n    | \"secondary\"\n    | \"ghost\"\n    | \"link\";\n}\n\nfunction PopoverTrigger({\n  children,\n  className,\n  variant = \"outline\",\n}: PopoverTriggerProps) {\n  const { openPopover, uniqueId } = usePopover();\n\n  return (\n    <motion.div key=\"button\" layoutId={`popover-${uniqueId}`}>\n      <Button variant={variant} className={className} onClick={openPopover}>\n        <motion.span layoutId={`popover-label-${uniqueId}`} className=\"text-sm\">\n          {children}\n        </motion.span>\n      </Button>\n    </motion.div>\n  );\n}\n\ninterface PopoverContentProps {\n  children: ReactNode;\n  className?: string;\n}\n\nfunction PopoverContent({ children, className }: PopoverContentProps) {\n  const { isOpen, closePopover, uniqueId } = usePopover();\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        contentRef.current &&\n        !contentRef.current.contains(event.target as Node)\n      ) {\n        closePopover();\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, [closePopover]);\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === \"Escape\") closePopover();\n    };\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, [closePopover]);\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <motion.div\n          ref={contentRef}\n          layoutId={`popover-${uniqueId}`}\n          className={cn(\n            \"bg-popover text-popover-foreground absolute z-50 min-w-[200px] overflow-hidden rounded-md border shadow-md outline-none\",\n            className,\n          )}\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: 0.9 }}\n        >\n          {children}\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n}\n\ninterface PopoverFormProps {\n  children: ReactNode;\n  onSubmit?: () => void;\n  className?: string;\n}\n\nfunction PopoverForm({ children, onSubmit, className }: PopoverFormProps) {\n  const { closePopover } = usePopover();\n\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    onSubmit?.();\n    closePopover();\n  };\n\n  return (\n    <form\n      className={cn(\"flex h-full flex-col\", className)}\n      onSubmit={handleSubmit}\n    >\n      {children}\n    </form>\n  );\n}\n\ninterface PopoverFooterProps {\n  children: ReactNode;\n  className?: string;\n}\n\nfunction PopoverFooter({ children, className }: PopoverFooterProps) {\n  return (\n    <div\n      key=\"close\"\n      className={cn(\n        \"flex items-center justify-between border-t px-4 py-3\",\n        className,\n      )}\n    >\n      {children}\n    </div>\n  );\n}\n\ninterface PopoverCloseButtonProps {\n  className?: string;\n}\n\nfunction PopoverCloseButton({ className }: PopoverCloseButtonProps) {\n  const { closePopover } = usePopover();\n\n  return (\n    <Button\n      type=\"button\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-8 w-8\", className)}\n      onClick={closePopover}\n      aria-label=\"Close popover\"\n    >\n      <X className=\"h-4 w-4\" />\n    </Button>\n  );\n}\n\ninterface PopoverSubmitButtonProps {\n  children?: ReactNode;\n  className?: string;\n  variant?:\n    | \"default\"\n    | \"destructive\"\n    | \"outline\"\n    | \"secondary\"\n    | \"ghost\"\n    | \"link\";\n}\n\nfunction PopoverSubmitButton({\n  children = \"Submit\",\n  className,\n  variant = \"default\",\n}: PopoverSubmitButtonProps) {\n  return (\n    <Button type=\"submit\" variant={variant} size=\"sm\" className={className}>\n      {children}\n    </Button>\n  );\n}\n\ninterface PopoverHeaderProps {\n  children: ReactNode;\n  className?: string;\n}\n\nfunction PopoverHeader({ children, className }: PopoverHeaderProps) {\n  return (\n    <div\n      className={cn(\n        \"text-foreground/90 border-b px-4 py-2.5 font-medium\",\n        className,\n      )}\n    >\n      {children}\n    </div>\n  );\n}\n\ninterface PopoverBodyProps {\n  children: ReactNode;\n  className?: string;\n}\n\nfunction PopoverBody({ children, className }: PopoverBodyProps) {\n  return <div className={cn(\"p-4\", className)}>{children}</div>;\n}\n\ninterface PopoverButtonProps {\n  children: ReactNode;\n  onClick?: () => void;\n  className?: string;\n}\n\nfunction PopoverButton({ children, onClick, className }: PopoverButtonProps) {\n  return (\n    <Button\n      variant=\"ghost\"\n      className={cn(\n        \"w-full justify-start gap-2 px-4 py-2 font-normal\",\n        className,\n      )}\n      onClick={onClick}\n    >\n      {children}\n    </Button>\n  );\n}\n\nexport {\n  PopoverRoot,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverForm,\n  PopoverFooter,\n  PopoverCloseButton,\n  PopoverSubmitButton,\n  PopoverHeader,\n  PopoverBody,\n  PopoverButton,\n};\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "motion"
  ]
}