{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "progress-bar",
  "type": "registry:component",
  "title": "Progress Bar",
  "description": "A progress bar component",
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "registry/default/components/progress-bar.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n  startTransition,\n  type ReactNode,\n} from \"react\";\nimport NextLink from \"next/link\";\nimport { useRouter } from \"next/navigation\";\n\ninterface ProgressBarTransitionProvider {\n  start: () => void;\n  stop: () => void;\n}\n\nconst ProgressBarTransitionCtx =\n  createContext<ProgressBarTransitionProvider | null>(null);\n\ninterface ProgressBarProgressProvider {\n  progress: number;\n  isLoading: boolean;\n}\n\nconst ProgressBarProgressCtx =\n  createContext<ProgressBarProgressProvider | null>(null);\n\nconst STATUS = {\n  IDLE: \"IDLE\",\n  LOADING: \"LOADING\",\n  COMPLETING: \"COMPLETING\",\n} as const;\n\ntype Status = (typeof STATUS)[keyof typeof STATUS];\n\nconst DEFAULT_TIMEOUT = 200;\n\nfunction easeOutExpo(t: number): number {\n  return t === 1 ? 1 : 1 - 2 ** (-10 * t);\n}\n\nfunction defaultUpdateProgress(\n  currentProgress: number,\n  easingFunction = easeOutExpo,\n  maxProgress: number = 0.95,\n): number {\n  if (currentProgress >= maxProgress) {\n    return maxProgress;\n  }\n\n  const remainingProgress = maxProgress - currentProgress;\n  const increment = Math.min(remainingProgress, 0.1);\n  const t = increment / remainingProgress;\n  const easedIncrement = easingFunction(t) * increment;\n  const newProgress = currentProgress + easedIncrement;\n\n  return Math.min(newProgress, maxProgress);\n}\n\ninterface ProviderProps {\n  updateProgress?: (progress: number) => number;\n  timeout?: number;\n  children: ReactNode;\n}\n\ntype ProgressInternal = (params: Omit<ProviderProps, \"children\">) => {\n  loading: boolean;\n  start: () => void;\n  stop: () => void;\n  progress: number;\n};\n\nconst useProgressInternal: ProgressInternal = ({\n  updateProgress = defaultUpdateProgress,\n  timeout = DEFAULT_TIMEOUT,\n}) => {\n  const [status, setStatus] = useState<Status>(STATUS.IDLE);\n  const [progress, setProgress] = useState(0);\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout;\n    if (status === STATUS.COMPLETING) {\n      setProgress(1);\n      timer = setTimeout(() => {\n        setStatus(STATUS.IDLE);\n        setProgress(0);\n      }, timeout);\n    }\n    return () => clearTimeout(timer);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [status]);\n\n  const handleStart = useCallback(() => {\n    setStatus(STATUS.LOADING);\n  }, []);\n\n  const handleComplete = useCallback(() => {\n    setStatus(STATUS.COMPLETING);\n  }, []);\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout;\n\n    const updater = (): void => {\n      setProgress((oldProgress) => updateProgress(oldProgress));\n    };\n\n    if (status === STATUS.LOADING) {\n      timer = setInterval(updater, timeout);\n    }\n\n    return () => {\n      clearInterval(timer);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [status]);\n\n  return {\n    loading: status === STATUS.LOADING || status === STATUS.COMPLETING,\n    start: handleStart,\n    stop: handleComplete,\n    progress,\n  };\n};\n\nexport function ProgressBarProvider(props: ProviderProps): React.ReactNode {\n  const progress = useProgressInternal({\n    timeout: props.timeout,\n    updateProgress: props.updateProgress,\n  });\n\n  const transitionValue = useMemo(\n    () => ({ start: progress.start, stop: progress.stop }),\n    [progress.start, progress.stop],\n  );\n\n  const progressValue = useMemo(\n    () => ({ progress: progress.progress, isLoading: progress.loading }),\n    [progress.progress, progress.loading],\n  );\n\n  return (\n    <ProgressBarTransitionCtx.Provider value={transitionValue}>\n      <ProgressBarProgressCtx.Provider value={progressValue}>\n        {props.children}\n      </ProgressBarProgressCtx.Provider>\n    </ProgressBarTransitionCtx.Provider>\n  );\n}\n\nexport function useProgressBarTransition(): ProgressBarTransitionProvider {\n  const ctx = useContext(ProgressBarTransitionCtx);\n\n  if (!ctx) {\n    throw new Error(\n      \"ProgressBarTransition not found. Make sure to use `ProgressBarProvider` before using the progress bar.\",\n    );\n  }\n\n  return ctx;\n}\n\nexport function useProgressBarProgress(): ProgressBarProgressProvider {\n  const ctx = useContext(ProgressBarProgressCtx);\n\n  if (!ctx) {\n    throw new Error(\n      \"ProgressBarProgress not found. Make sure to use `ProgressBarProvider` before using the progress bar.\",\n    );\n  }\n\n  return ctx;\n}\n\ninterface ProgressBarProps {\n  className?: string;\n}\n\nexport function ProgressBar({ className }: ProgressBarProps) {\n  const { progress, isLoading } = useProgressBarProgress();\n  return (\n    <div\n      className={cn(\n        \"bg-primary fixed top-0 left-0 z-[9999] h-1 overflow-hidden transition-[width] duration-200 ease-in-out\",\n        className,\n      )}\n      style={{\n        width: `${progress * 100}%`,\n        visibility: isLoading ? \"visible\" : \"hidden\",\n      }}\n    />\n  );\n}\n\nfunction isModifiedEvent(event: React.MouseEvent): boolean {\n  const eventTarget = event.currentTarget as HTMLAnchorElement | SVGAElement;\n  const target = eventTarget.getAttribute(\"target\");\n  return (\n    (target && target !== \"_self\") ||\n    event.metaKey ||\n    event.ctrlKey ||\n    event.shiftKey ||\n    event.altKey || // triggers resource download\n    (event.nativeEvent && event.nativeEvent.which === 2)\n  );\n}\n\nexport function Link({\n  href,\n  children,\n  replace,\n  scroll,\n  ...rest\n}: {\n  href: string;\n} & Omit<Parameters<typeof NextLink>[0], \"link\">): React.ReactElement {\n  const router = useRouter();\n  const { start, stop } = useProgressBarTransition();\n  return (\n    <NextLink\n      href={href}\n      onClick={(e) => {\n        if (isModifiedEvent(e)) {\n          return;\n        }\n        e.preventDefault();\n        start();\n        startTransition(() => {\n          if (replace) {\n            router.replace(href, { scroll });\n          } else {\n            router.push(href, { scroll });\n          }\n          stop();\n        });\n      }}\n      {...rest}\n    >\n      {children}\n    </NextLink>\n  );\n}\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "other"
  ]
}